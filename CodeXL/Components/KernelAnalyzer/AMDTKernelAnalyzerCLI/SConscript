# -*- Python -*-

Import('*')
from CXL_init import *

libName = "CodeXLAnalyzer-bin"

env = CXL_env.Clone()

#need to overwrite compiler flags without the -Werror since some libraries are causing problems
compiler_base_flags = " -std=c++11 -Wall -Wextra -g -fmessage-length=0 -Wno-unknown-pragmas -pthread -DGDT_BUILD_SUFFIX="
    
if (env['CXL_build'] == 'debug'):
    compiler_base_flags += ' -D_DEBUG -D_LINUX'
else:
    compiler_base_flags += ' -O3 -DNDEBUG -D_LINUX'

if (env['CXL_build_conf'] == 'PUBLIC'):
	compiler_base_flags += ' -DGDT_PUBLIC '
elif (env['CXL_build_conf'] == 'NDA'):
	compiler_base_flags += ' -DGDT_NDA '
elif (env['CXL_build_conf'] == 'INTERNAL'):
	compiler_base_flags += ' -DGDT_INTERNAL '
else:
	compiler_base_flags += ' -DGDT_PUBLIC '

env.Replace(CPPFLAGS = compiler_base_flags)

initBoost(env)
UseBoost(env)
UseAPPSDK (env)

env.Append( CPPPATH = [ 
	".",
	"../",
	"./Include",
	"./src/",
	env['CXL_commonproj_dir'],
	env['CXL_common_dir'] + '/Src/',
	env['CXL_common_dir'] + '/Src/CElf/Include',
	env['CXL_common_dir'] + '/Lib/AMD/CAL/8.95/include',
	env['CXL_common_dir'] + '/Lib/Ext/glew/1.9.0/include',
	env['CXL_common_dir'] + '/Src/ADLUtil',
	env['CXL_common_dir'] + '/Lib/AMD/ADL/include',
	env['CXL_common_dir'] + '/Src/TSingleton',
	env['CXL_common_dir'] + '/Src/DeviceInfo',
	env['CXL_common_dir'] + '/Lib/AMD/sp3/Include',
	env['CXL_common_dir'] + '/Src/DynamicLibraryModule',
	env['CXL_common_dir'] + '/Lib/AMD/APPSDK/3-0/include',
	env['CXL_common_dir'] + '/Lib/AMD/ACL/TOT/include'
])

sources = \
[
	"src/kcConfig.cpp",
	"src/kcFiles.cpp",
	"src/kcMain.cpp",
	"src/kcUtils.cpp",
	"src/kcParseCmdLine.cpp",
	"src/kcCLICommanderCL.cpp",
	"src/kcCLICommanderGL.cpp",
	"src/kcCLICommanderOpenGL.cpp",
	"src/kcCLICommanderVulkan.cpp",
	"src/kcOpenGLStatisticsParser.cpp",
	"src/kcVulkanStatisticsParser.cpp",
]

commonLinkedLibraries = \
[
	"AMDTBaseTools",
	"AMDTOSWrappers",
	"AMDTOSAPIWrappers",
	"AMDTAnalysisBackend",
	"GLEW",
	"libboost_regex",
	"libboost_system",
	"libboost_filesystem",
	"libboost_program_options",
  	"libpthread",
	"libz"
]

otherResources = \
[
    "./LinuxResources/CodeXLAnalyzer",
]

# Contains all linked libraries:
linkedLibraries = commonLinkedLibraries
env.Prepend (LIBS = linkedLibraries)
	
# Creating object files	
objFiles = env.SharedObject(sources)

# Creating shared libraries
soFiles = env.Program(
	target = libName, 
	source = objFiles)

# Installing libraries
libInstall = env.Install( 
	dir = env['CXL_lib_dir'], 
	source = (soFiles))

# Install additional items - shell script, readme, etc.
libInstall += env.Install(
    dir = env['CXL_lib_dir'], 
    source = (otherResources))

Return('libInstall')
